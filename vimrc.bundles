"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta', 'json', 'nginx', 'golang', 'ruby', 'less', 'php', 'coffeescript']
    let g:bundle_groups=['python', 'markdown', 'golang', 'c++']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

Plug 'lfv89/vim-interestingwords'           " 选中光标指向单词
Plug 'scrooloose/nerdcommenter'             " 快速注释
Plug 'christoomey/vim-tmux-navigator'       " vim和tmux导航
Plug 'Lokaltog/vim-easymotion'              " 更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'vim-airline/vim-airline'              " 状态栏增强展示
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/a.vim'                    " .h和.c快速切换
Plug 't9md/vim-choosewin'                   " 切换window
Plug 'mbbill/undotree'                      " undo
Plug 'luochen1990/rainbow'
Plug 'tpope/vim-fugitive'                   " git相关
Plug 'junegunn/gv.vim'
Plug 'scrooloose/nerdtree'
Plug 'conradirwin/vim-bracketed-paste'      " 粘贴代码插件，无需再对vim设置
Plug 'skywind3000/asyncrun.vim'             " 后台任务执行插件
Plug 'iCyMind/NeoSolarized'
Plug 'mhinz/vim-startify', { 'on': 'Startify' }  "启动窗口界面
Plug 'maralla/completor.vim'
Plug 'yianwillis/vimcdoc'                   " vim的中文文档
Plug 'tpope/vim-surround'                     " 快速修改匹配
Plug 'jiangmiao/auto-pairs'                   " 快速匹配
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'pbogut/fzf-mru.vim'

if count(g:bundle_groups, 'c++')
    Plug 'octol/vim-cpp-enhanced-highlight'
    Plug 'kana/vim-textobj-user'
    Plug 'kana/vim-textobj-indent'
    Plug 'kana/vim-textobj-syntax'
    Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
    Plug 'sgur/vim-textobj-parameter'
endif

if count(g:bundle_groups, 'golang')
    Plug 'fatih/vim-go', {'for': 'go'}
endif

if count(g:bundle_groups, 'python')
    " Plug 'python-mode/python-mode', { 'for': 'python' }
    Plug 'tmhedberg/SimpylFold', { 'for': 'python' }
endif

" Add plugins to &runtimepath
call plug#end()

" vim-startify {{{
    augroup vimStart
    autocmd!
    autocmd VimEnter *
              \   if !argc()
              \|    call plug#load('vim-startify')
              \|    silent! Startify
              \|  endif
    augroup END

      let g:startify_custom_header = [
              \'        __   _(_)_ __ ___',
              \'        \ \ / / | -_ - _ \',
              \'         \ V /| | | | | | |',
              \'          \_/ |_|_| |_| |_|',
              \]

    let g:startify_list_order = [
              \ ['   Recent Files:'],
              \ 'files',
              \ ['   Project:'],
              \ 'dir',
              \ ['   Sessions:'],
              \ 'sessions',
              \ ['   Bookmarks:'],
              \ 'bookmarks',
              \ ['   Commands:'],
              \ 'commands',
              \ ]

    let g:startify_change_to_vcs_root = 1
" }}}

" nerdcommenter {{{
    let g:NERDSpaceDelims=1

    nmap <Leader>cc <Plug>NERDCommenterToggle
    omap <Leader>cc <Plug>NERDCommenterToggle
    vmap <Leader>cc <Plug>NERDCommenterToggle
" }}}

" vim-interestingwords {{{
    nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
    nnoremap <silent> <leader>K :call UncolorAllWords()<cr>
    nnoremap <silent> n :call WordNavigation('forward')<cr>
    nnoremap <silent> N :call WordNavigation('backward')<cr>
    let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']
    let g:interestingWordsTermColors = ['154', '121', '211', '137', '214', '222']
" }}}

" easymotion {{{
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}

" vim-airline {
    let g:airline_theme='solarized'
    let g:airline_solarized_bg='dark'
    let g:Powerline_symbols='fancy'
    let g:airline#extensions#tabline#enabled=1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#tabline#buffer_nr_format = '%s:'
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#tabline#fnamecollapse = 1
    let g:airline#extensions#tabline#fnametruncate = 0
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#default#section_truncate_width = {
                \ 'b': 79,
                \ 'x': 60,
                \ 'y': 88,
                \ 'z': 45,
                \ 'warning': 80,
                \ 'error': 80,
                \ }
    let g:airline#extensions#default#layout = [
                \ [ 'a', 'error', 'warning', 'b', 'c' ],
                \ [ 'x', 'y', 'z' ]
                \ ]
    " 关闭状态显示空白符号计数
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#whitespace#symbol = '!'
    " Distinct background color is enough to discriminate the warning and
    " error information.
    let g:airline#extensions#ale#error_symbol = '•'
    let g:airline#extensions#ale#warning_symbol = '•'
" }

" fugitive {{{
    nnoremap <leader>gs :Gstatus<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gl :Glog<CR>
    nnoremap <leader>gp :Git push<CR>
" }}}

" rainbow {
    let g:rainbow_active = 1
    let g:rainbow_conf = {
              \   'guifgs': ['#4F97D7', '#D75F87', '#D697E6', '#40AF81', '#DA61AE', '#70AF67'],
              \   'ctermfgs': ['68', '168', '176', '104', '73', '212'],
              \   'operators': '_,_',
              \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
              \   'separately': {
              \       '*': {},
              \       'tex': {
              \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
              \       },
              \       'lisp': {
              \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', '#FF69B4', '#DDA0DD', '#F08080', '#FF8C00', '#20B2AA'],
              \       },
              \       'vim': {
              \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
              \       },
              \       'html': {
              \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
              \       },
              \       'css': 0,
              \   }
              \}
" }

" nerdtree {{{
    let g:NERDTreeShowHidden=1
    let g:NERDTreeAutoDeleteBuffer=1
    let NERDTreeHighlightCursorline=1
    let g:NERDTreeDirArrowCollapsible = '▼'
    let g:NERDTreeIgnore=[
              \ '\.py[cdo]$', '\~$', '\.swo$', '\.swp$', '\.DS_Store$',
              \ '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$',
              \ '\.obj$', '\.o$', '\.so$', '\.egg$',
              \ ]
    " close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    nnoremap <leader>n :NERDTreeToggle<CR>
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
" }}}

" undotree {{{
    map <leader>u :UndotreeToggle<CR>
" }}}

" a.vim {{{
    " .h和.c切换相关
    map <leader>aa :A<CR>
" }}}


" vim-go {{{
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_fail_silently = 1
" }}}


" fzf {
    nnoremap <Leader>ff :Files<CR>
    nnoremap <Leader>fg :GFiles<CR>
    nnoremap <Leader>fb :Buffers<CR>
    nnoremap <Leader>ag :Ag
    nnoremap <Leader>ss :BLines<CR>
    nnoremap <Leader>ft :BTags<CR>
    nnoremap <Leader>fa :Tags<CR>
    nnoremap <Leader>fr :FZFMru<CR>

    " This is the default extra key bindings
    let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit' }

    " Default fzf layout
    " - down / up / left / right
    let g:fzf_layout = { 'down': '~40%' }

    " In Neovim, you can set up fzf window using a Vim command
    let g:fzf_layout = { 'window': 'enew' }
    let g:fzf_layout = { 'window': '-tabnew' }
    let g:fzf_layout = { 'window': '10split enew' }

    " Customize fzf colors to match your color scheme
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }
" }

" asyncomplete {
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
" }

" asyncrun.vim {
    nnoremap <Leader>ar :AsyncRun
    nnoremap <Leader>ao :copen<CR>
    nnoremap <Leader>ac :cclose<CR>
" }

" t9md/vim-choosewin {
    nmap  -  <Plug>(choosewin)
" }

" junegunn/gv.vim {
    nnoremap <leader>gv :GV<CR>
" }
"------------------------------------------- end of configs --------------------------------------------
